{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Portf\u00f3lio \u00b7 Plataformas, Microsservi\u00e7os e APIs","text":"<p>Resumo</p> <p>Este site documenta minha implementa\u00e7\u00e3o dos exerc\u00edcios da disciplina Plataformas, Microsservi\u00e7os, DevOps e APIs (Insper). A ideia \u00e9 mostrar o que eu constru\u00ed, como implementei cada servi\u00e7o e evid\u00eancias (prints / logs / comandos).</p>"},{"location":"#sobre-mim","title":"Sobre mim \ud83d\udc69\u200d\ud83d\udcbb","text":"<ul> <li>Nome: Giovanny Russo </li> <li>Stack principal: Spring Boot, Python (FastAPI), Docker, Jenkins, Kubernetes.</li> </ul>"},{"location":"#arquitetura-de-microsservicos","title":"Arquitetura de Microsservi\u00e7os","text":"Microservice Interface (API / Endpoint P\u00fablico) Implementa\u00e7\u00e3o Auth Auth Auth-Service Account Account Account-Service Order Order Order-Service Product Product Product-Service Gateway Gateway Exchange Exchange"},{"location":"#visao-geral-da-arquitetura","title":"Vis\u00e3o Geral da Arquitetura","text":"<p>A disciplina trabalha com uma arquitetura baseada em microsservi\u00e7os (account-service, auth-service, product-service, order-service, exchange-service), um API Gateway e um banco de dados. Cada microsservi\u00e7o \u00e9 isolado, mas todos se conversam via HTTP dentro de uma camada \"confi\u00e1vel\" (Trusted Layer).</p> <p>```mermaid flowchart LR     subgraph Internet         client[Cliente / Front-end]     end</p> <pre><code>client --&gt; gateway[API Gateway]\n\nsubgraph \"Trusted Layer\"\n    gateway --&gt; account[account-service]\n    gateway --&gt; auth[auth-service]\n    gateway --&gt; product[product-service]\n    gateway --&gt; order[order-service]\n    gateway --&gt; exchange[exchange-service (Python)]\n    account --&gt; db[(Database)]\n    product --&gt; db\n    order --&gt; db\n    order --&gt; product\n    exchange --&gt; extAPI[(3rd-party FX API)]\nend\n</code></pre>"},{"location":"exercicio1/","title":"1. Product API","text":""},{"location":"exercicio1/#8-docsexercicio1md","title":"8. <code>docs/exercicio1.md</code>","text":"<p>```markdown</p>"},{"location":"exercicio1/#exercicio-1-product-api","title":"Exerc\u00edcio 1 \u00b7 Product API","text":"<p>Objetivo oficial</p> <p>Criar uma API REST para uma loja, com recursos <code>product</code> e <code>order</code>. A API deve permitir cadastrar produtos, listar produtos, buscar por ID e apagar. Para consumir a API, o usu\u00e1rio precisa estar autenticado. (Baseado no enunciado \"1. Product API\") Refer\u00eancia: https://insper.github.io/platform/exercises/product/</p>"},{"location":"exercicio1/#o-que-eu-implementei","title":"O que eu implementei","text":"<ul> <li>Criei o microsservi\u00e7o <code>product-service</code>.</li> <li>Endpoints principais (exemplo):</li> <li><code>POST /product</code> \u2014 cria um produto novo.</li> <li><code>GET /product</code> \u2014 lista todos os produtos.</li> <li><code>GET /product/{id}</code> \u2014 retorna um produto espec\u00edfico.</li> <li><code>DELETE /product/{id}</code> \u2014 remove um produto espec\u00edfico.</li> <li>Integra\u00e7\u00e3o com banco de dados para persistir os produtos.</li> <li>Integra\u00e7\u00e3o com autentica\u00e7\u00e3o (gateway + auth-service).</li> <li>Status HTTP corretos (<code>201 created</code>, <code>200 ok</code>, <code>204 no content</code>, etc).</li> </ul> <p>```mermaid flowchart LR     gateway[API Gateway] --&gt; product[product-service]     product --&gt; db[(Database)]     product --&gt; order[order-service]</p>"},{"location":"exercicio2/","title":"2. Order API","text":""},{"location":"exercicio2/#9-docsexercicio2md","title":"9. <code>docs/exercicio2.md</code>","text":"<p>```markdown</p>"},{"location":"exercicio2/#exercicio-2-order-api","title":"Exerc\u00edcio 2 \u00b7 Order API","text":"<p>Objetivo oficial</p> <p>Criar a API de pedidos (<code>order-service</code>). O usu\u00e1rio autenticado consegue gerar um pedido com itens que referenciam produtos existentes, e o servi\u00e7o calcula total e data. Tamb\u00e9m precisa listar os pedidos do pr\u00f3prio usu\u00e1rio e consultar o detalhe de um pedido espec\u00edfico, garantindo que ele s\u00f3 veja o que \u00e9 dele. (Baseado no enunciado \"2. Order API\") Refer\u00eancia: https://insper.github.io/platform/exercises/order/</p>"},{"location":"exercicio2/#o-que-eu-implementei","title":"O que eu implementei","text":"<ul> <li>Criei o microsservi\u00e7o <code>order-service</code>.</li> <li>Endpoints principais:</li> <li><code>POST /order</code> \u2014 cria um novo pedido para o usu\u00e1rio logado (lista de itens <code>{idProduct, quantity}</code>).</li> <li><code>GET /order</code> \u2014 lista todos os pedidos do usu\u00e1rio atual.</li> <li><code>GET /order/{id}</code> \u2014 detalhes de um pedido espec\u00edfico (se n\u00e3o for do usu\u00e1rio \u2192 <code>404</code>).</li> <li>C\u00e1lculo autom\u00e1tico de total (somando pre\u00e7o * quantidade).</li> <li>Integra\u00e7\u00e3o entre <code>order-service</code> e <code>product-service</code> (pra validar produto e pre\u00e7o).</li> </ul> <p>```mermaid flowchart LR     gateway[API Gateway] --&gt; order[order-service]     order --&gt; product[product-service]     product --&gt; db[(Database)]     order --&gt; db</p>"},{"location":"exercicio3/","title":"3. Exchange API","text":""},{"location":"exercicio3/#10-docsexercicio3md","title":"10. <code>docs/exercicio3.md</code>","text":"<p>```markdown</p>"},{"location":"exercicio3/#exercicio-3-exchange-api-python","title":"Exerc\u00edcio 3 \u00b7 Exchange API (Python)","text":"<p>Objetivo oficial</p> <p>Criar um microsservi\u00e7o de c\u00e2mbio que converte moedas (<code>exchange-service</code>). Esse servi\u00e7o tem que ser em Python e deve consumir uma API externa de taxas de c\u00e2mbio (por ex. AwesomeAPI, ExchangeRate-API etc.). Ele exp\u00f5e um endpoint REST tipo <code>GET /exchange/{from}/{to}</code> que devolve a taxa de convers\u00e3o e metadados (data, id da conta, etc.). (Baseado no enunciado \"3. Exchange API\") Refer\u00eancia: https://insper.github.io/platform/exercises/exchange/</p>"},{"location":"exercicio3/#o-que-eu-implementei","title":"O que eu implementei","text":"<ul> <li>Servi\u00e7o <code>exchange-service</code> escrito em Python (FastAPI).</li> <li>Endpoint principal:</li> <li><code>GET /exchange/{from}/{to}</code> \u2192 retorna quanto vale 1 unidade da moeda <code>{from}</code> em <code>{to}</code>.</li> <li>Esse servi\u00e7o faz chamada HTTP para uma API externa de c\u00e2mbio em tempo real.</li> <li>O gateway encaminha a chamada autenticada para o <code>exchange-service</code>.</li> </ul> <p>```mermaid flowchart LR     gateway[API Gateway] --&gt; exchange[exchange-service (Python)]     exchange --&gt; extAPI[(3rd-party FX API)]</p>"},{"location":"exercicio4/","title":"4. Jenkins / CI-CD","text":""},{"location":"exercicio4/#11-docsexercicio4md","title":"11. <code>docs/exercicio4.md</code>","text":"<p>```markdown</p>"},{"location":"exercicio4/#exercicio-4-jenkins-ci-cd","title":"Exerc\u00edcio 4 \u00b7 Jenkins / CI-CD","text":"<p>Objetivo oficial</p> <p>Montar um pipeline Jenkins que faz build e deploy autom\u00e1tico dos microsservi\u00e7os. Pipeline padr\u00e3o: 1. SCM (pegar c\u00f3digo do repo) 2. Dependencies 3. Build 4. Push da imagem Docker (multi-arch) pro Docker Hub 5. Deploy em Kubernetes Todos os microsservi\u00e7os (account-service, auth-service, gateway-service, product-service, order-service) devem ir para o mesmo cluster. (Baseado no enunciado \"4. Jenkins\") Refer\u00eancia: https://insper.github.io/platform/exercises/jenkins/</p>"},{"location":"exercicio4/#o-que-eu-implementei","title":"O que eu implementei","text":"<ul> <li>Jenkinsfile com stages: Dependecies \u2192 Build \u2192 Build &amp; Push Image \u2192 Deploy.</li> <li>Uso de <code>withCredentials</code> pra logar no Docker Hub dentro do pipeline.</li> <li>Build multi-plataforma (<code>linux/arm64</code>, <code>linux/amd64</code>) usando <code>docker buildx</code>.</li> <li>Tag autom\u00e1tica <code>latest</code> e tag usando o <code>BUILD_ID</code>.</li> </ul> <p>Exemplo (baseado no modelo do professor adaptado pra mim):</p> <p>```groovy pipeline {     agent any     environment {         SERVICE = 'account'         NAME = \"SEU_DOCKERHUB/${env.SERVICE}\"     }     stages {         stage('Dependecies') {             steps {                 build job: 'account', wait: true             }         }         stage('Build') {             steps {                 sh 'mvn -B -DskipTests clean package'             }         }         stage('Build &amp; Push Image') {             steps {                 withCredentials([usernamePassword(                     credentialsId: 'dockerhub-credential',                     usernameVariable: 'USERNAME',                     passwordVariable: 'TOKEN')]) {                     sh \"docker login -u $USERNAME -p $TOKEN\"                     sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"                     sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f Dockerfile .\"                     sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"                 }             }         }         // opcional: stage('Deploy to K8s') { ... }     } }</p>"},{"location":"exercicio5/","title":"5. MiniKube / K8s local","text":""},{"location":"exercicio5/#12-docsexercicio5md","title":"12. <code>docs/exercicio5.md</code>","text":"<p>```markdown</p>"},{"location":"exercicio5/#exercicio-5-minikube-kubernetes-local","title":"Exerc\u00edcio 5 \u00b7 MiniKube / Kubernetes Local","text":"<p>Objetivo oficial</p> <p>Subir TODOS os microsservi\u00e7os no MESMO cluster Kubernetes (local ou cloud). Voc\u00ea deve criar manifestos <code>k8s.yaml</code> com pelo menos: - Secrets - ConfigMap - Deployment - Service E provar (com v\u00eddeo / prints) que todos est\u00e3o rodando no mesmo cluster (pode ser Minikube, Kind ou Kubernetes do Docker Desktop). (Baseado no enunciado \"5. MiniKube\") Refer\u00eancia: https://insper.github.io/platform/exercises/minikube/</p>"},{"location":"exercicio5/#o-que-eu-implementei","title":"O que eu implementei","text":"<ul> <li>Ativei Kubernetes local (ex: Minikube).</li> <li>Para cada servi\u00e7o (<code>account-service</code>, <code>auth-service</code>, <code>gateway-service</code>, <code>product-service</code>, <code>order-service</code>) criei um diret\u00f3rio <code>k8s/</code> com um <code>k8s.yaml</code>.</li> <li>Os manifests definem:</li> <li>Secrets (credenciais sens\u00edveis, tokens, etc.)</li> <li>ConfigMap (config n\u00e3o secreta)</li> <li>Deployment (pods, imagem Docker que veio do Jenkins)</li> <li>Service (tipo ClusterIP pro tr\u00e1fego interno)</li> </ul> <p>Exemplo de estrutura esperada: ```text api/ \u2514\u2500\u2500 account-service/     \u2514\u2500\u2500 k8s/         \u2514\u2500\u2500 k8s.yaml</p>"}]}